---@type Colorscheme
local M = {}

M.type = 'dark'
M.borders = 'rounded'

M.colors = {
  background = '#282A36',
  second_background = '#0d0f18',
  tab_background = '#f8f8f2',
  foreground = '#f8f8f2',
  active_accent = '#A6BAB5',
  inactive_accent = '#556B6B',

  white = '#ABB2BF',
  black = '#191A21',
  grey = '#44475A',

  red = '#FF5555',
  orange = '#FFB86C',
  yellow = '#F1FA8C',
  green = '#50fa7b',
  cyan = '#8BE9FD',
  blue = '#86aaec',
  magenta = '#BD93F9',

  baby_pink = '#c79bf0',
  pink = '#FF79C6',
  nord_blue = '#A4FFFF',
  teal = '#7ddac5',

  bright_black = '#1c1e27',
  bright_green = '#69FF94',
  bright_yellow = '#FFFFA5',
  bright_magenta = '#FF92DF',
}

-- TODO: FOR ALL POLISH HIGHLIGHTS ADD CATEGORIES FOR UPDATED COLORS
M.polish_hl = {
  Normal = { fg = M.colors.foreground, bg = M.colors.background },
  NormalFloat = { fg = M.colors.foreground, bg = M.colors.background },
  Comment = { fg = M.colors.grey, italic = true },
  Constant = { fg = M.colors.yellow },
  String = { fg = M.colors.yellow },
  Character = { fg = M.colors.green },
  Number = { fg = M.colors.orange },
  Boolean = { fg = M.colors.cyan },
  Float = { fg = M.colors.orange },
  FloatBorder = { fg = M.colors.white },
  Operator = { fg = M.colors.magenta },
  Keyword = { fg = M.colors.cyan },
  Keywords = { fg = M.colors.cyan },
  Identifier = { fg = M.colors.cyan },
  Function = { fg = M.colors.yellow },
  Statement = { fg = M.colors.magenta },
  Conditional = { fg = M.colors.pink },
  Repeat = { fg = M.colors.pink },
  Label = { fg = M.colors.cyan },
  Exception = { fg = M.colors.magenta },
  PreProc = { fg = M.colors.yellow },
  Include = { fg = M.colors.magenta },
  Define = { fg = M.colors.magenta },
  Title = { fg = M.colors.cyan },
  Macro = { fg = M.colors.magenta },
  PreCondit = { fg = M.colors.cyan },
  Type = { fg = M.colors.cyan },
  StorageClass = { fg = M.colors.pink },
  Structure = { fg = M.colors.yellow },
  TypeDef = { fg = M.colors.yellow },
  Special = { fg = M.colors.green, italic = true },
  SpecialComment = { fg = M.colors.comment, italic = true },
  Error = { fg = M.colors.pink },
  Todo = { fg = M.colors.magenta, bold = true, italic = true },
  Underlined = { fg = M.colors.cyan, underline = true },

  Cursor = { reverse = true },
  CursorLineNr = { fg = M.colors.foreground, bold = true },

  SignColumn = { bg = M.colors.bg },

  Conceal = { fg = M.colors.comment },
  CursorColumn = { bg = M.colors.black },
  CursorLine = { bg = M.colors.selection },
  ColorColumn = { bg = M.colors.selection },

  StatusLine = { fg = M.colors.white, bg = M.colors.black },
  StatusLineNC = { fg = M.colors.comment },
  StatusLineTerm = { fg = M.colors.white, bg = M.colors.black },
  StatusLineTermNC = { fg = M.colors.comment },

  Directory = { fg = M.colors.cyan },
  DiffAdd = { fg = M.colors.bg, bg = M.colors.green },
  DiffChange = { fg = M.colors.orange },
  DiffDelete = { fg = M.colors.red },
  DiffText = { fg = M.colors.comment },

  ErrorMsg = { fg = M.colors.pink },
  VertSplit = { fg = M.colors.black },
  WinSeparator = { fg = M.colors.black },
  Folded = { fg = M.colors.comment },
  FoldColumn = {},
  Search = { fg = M.colors.black, bg = M.colors.orange },
  IncSearch = { fg = M.colors.orange, bg = M.colors.comment },
  LineNr = { fg = M.colors.comment },
  MatchParen = { fg = M.colors.foreground, underline = true },
  NonText = { fg = M.colors.nontext },
  Pmenu = { fg = M.colors.white, bg = M.colors.menu },
  PmenuSel = { fg = M.colors.white, bg = M.colors.selection },
  PmenuSbar = { bg = M.colors.bg },
  PmenuThumb = { bg = M.colors.selection },

  Question = { fg = M.colors.magenta },
  QuickFixLine = { fg = M.colors.black, bg = M.colors.yellow },
  SpecialKey = { fg = M.colors.nontext },

  SpellBad = { fg = M.colors.pink, underline = true },
  SpellCap = { fg = M.colors.yellow },
  SpellLocal = { fg = M.colors.yellow },
  SpellRare = { fg = M.colors.yellow },

  TabLine = { fg = M.colors.comment },
  TabLineSel = { fg = M.colors.white },
  TabLineFill = { bg = M.colors.bg },
  Terminal = { fg = M.colors.white, bg = M.colors.black },
  Visual = { bg = M.colors.visual },
  VisualNOS = { fg = M.colors.visual },
  WarningMsg = { fg = M.colors.yellow },
  WildMenu = { fg = M.colors.black, bg = M.colors.white },

  -- EndOfBuffer = endOfBuffer,

  -- TreeSitter
  ['@error'] = { fg = M.colors.pink },
  ['@punctuation.delimiter'] = { fg = M.colors.foreground },
  ['@punctuation.bracket'] = { fg = M.colors.foreground },
  ['@markup.list'] = { fg = M.colors.cyan },

  ['@constant'] = { fg = M.colors.magenta },
  ['@constant.builtin'] = { fg = M.colors.magenta },
  ['@markup.link.label.symbol'] = { fg = M.colors.magenta },

  ['@constant.macro'] = { fg = M.colors.cyan },
  ['@string.regexp'] = { fg = M.colors.red },
  ['@string'] = { fg = M.colors.yellow },
  ['@string.escape'] = { fg = M.colors.cyan },
  ['@string.special.symbol'] = { fg = M.colors.magenta },
  ['@character'] = { fg = M.colors.green },
  ['@number'] = { fg = M.colors.magenta },
  ['@boolean'] = { fg = M.colors.magenta },
  ['@number.float'] = { fg = M.colors.green },
  ['@annotation'] = { fg = M.colors.yellow },
  ['@attribute'] = { fg = M.colors.cyan },
  ['@module'] = { fg = M.colors.orange },

  ['@function.builtin'] = { fg = M.colors.cyan },
  ['@function'] = { fg = M.colors.green },
  ['@function.macro'] = { fg = M.colors.green },
  ['@variable.parameter'] = { fg = M.colors.orange },
  ['@variable.parameter.reference'] = { fg = M.colors.orange },
  ['@function.method'] = { fg = M.colors.green },
  ['@variable.member'] = { fg = M.colors.orange },
  ['@property'] = { fg = M.colors.magenta },
  ['@constructor'] = { fg = M.colors.cyan },

  ['@keyword.conditional'] = { fg = M.colors.pink },
  ['@keyword.repeat'] = { fg = M.colors.pink },
  ['@label'] = { fg = M.colors.cyan },

  ['@keyword'] = { fg = M.colors.pink },
  ['@keyword.function'] = { fg = M.colors.cyan },
  ['@keyword.function.ruby'] = { fg = M.colors.pink },
  ['@keyword.operator'] = { fg = M.colors.pink },
  ['@operator'] = { fg = M.colors.pink },
  ['@keyword.exception'] = { fg = M.colors.magenta },
  ['@type'] = { fg = M.colors.nord_blue },
  ['@type.builtin'] = { fg = M.colors.cyan, italic = true },
  ['@type.qualifier'] = { fg = M.colors.pink },
  ['@structure'] = { fg = M.colors.magenta },
  ['@keyword.include'] = { fg = M.colors.pink },

  ['@variable'] = { fg = M.colors.foreground },
  ['@variable.builtin'] = { fg = M.colors.magenta },

  ['@markup'] = { fg = M.colors.orange },
  ['@markup.strong'] = { fg = M.colors.orange, bold = true }, -- bold
  ['@markup.emphasis'] = { fg = M.colors.yellow, italic = true }, -- italic
  ['@markup.underline'] = { fg = M.colors.orange },
  ['@markup.heading'] = { fg = M.colors.pink, bold = true }, -- title
  ['@markup.raw'] = { fg = M.colors.yellow }, -- inline code
  ['@markup.link.url'] = { fg = M.colors.yellow, italic = true }, -- urls
  ['@markup.link'] = { fg = M.colors.orange, bold = true },

  ['@tag'] = { fg = M.colors.cyan },
  ['@tag.attribute'] = { fg = M.colors.green },
  ['@tag.delimiter'] = { fg = M.colors.cyan },

  -- Semantic
  ['@class'] = { fg = M.colors.cyan },
  ['@struct'] = { fg = M.colors.cyan },
  ['@enum'] = { fg = M.colors.cyan },
  ['@enumMember'] = { fg = M.colors.magenta },
  ['@event'] = { fg = M.colors.cyan },
  ['@interface'] = { fg = M.colors.cyan },
  ['@modifier'] = { fg = M.colors.cyan },
  ['@regexp'] = { fg = M.colors.yellow },
  ['@typeParameter'] = { fg = M.colors.cyan },
  ['@decorator'] = { fg = M.colors.cyan },

  -- LSP Semantic (0.9+)
  ['@lsp.type.class'] = { fg = M.colors.cyan },
  ['@lsp.type.enum'] = { fg = M.colors.cyan },
  ['@lsp.type.decorator'] = { fg = M.colors.green },
  ['@lsp.type.enumMember'] = { fg = M.colors.magenta },
  ['@lsp.type.function'] = { fg = M.colors.green },
  ['@lsp.type.interface'] = { fg = M.colors.cyan },
  ['@lsp.type.macro'] = { fg = M.colors.cyan },
  ['@lsp.type.method'] = { fg = M.colors.green },
  ['@lsp.type.namespace'] = { fg = M.colors.orange },
  ['@lsp.type.parameter'] = { fg = M.colors.orange },
  ['@lsp.type.property'] = { fg = M.colors.magenta },
  ['@lsp.type.struct'] = { fg = M.colors.cyan },
  ['@lsp.type.type'] = { fg = M.colors.nord_blue },
  ['@lsp.type.variable'] = { fg = M.colors.foreground },

  -- HTML
  htmlArg = { fg = M.colors.green },
  htmlBold = { fg = M.colors.yellow, bold = true },
  htmlEndTag = { fg = M.colors.cyan },
  htmlH1 = { fg = M.colors.pink },
  htmlH2 = { fg = M.colors.pink },
  htmlH3 = { fg = M.colors.pink },
  htmlH4 = { fg = M.colors.pink },
  htmlH5 = { fg = M.colors.pink },
  htmlH6 = { fg = M.colors.pink },
  htmlItalic = { fg = M.colors.magenta, italic = true },
  htmlLink = { fg = M.colors.magenta, underline = true },
  htmlSpecialChar = { fg = M.colors.yellow },
  htmlSpecialTagName = { fg = M.colors.cyan },
  htmlTag = { fg = M.colors.cyan },
  htmlTagN = { fg = M.colors.cyan },
  htmlTagName = { fg = M.colors.cyan },
  htmlTitle = { fg = M.colors.white },

  -- Markdown
  markdownBlockquote = { fg = M.colors.yellow, italic = true },
  markdownBold = { fg = M.colors.orange, bold = true },
  markdownCode = { fg = M.colors.green },
  markdownCodeBlock = { fg = M.colors.orange },
  markdownCodeDelimiter = { fg = M.colors.red },
  markdownH1 = { fg = M.colors.pink, bold = true },
  markdownH2 = { fg = M.colors.pink, bold = true },
  markdownH3 = { fg = M.colors.pink, bold = true },
  markdownH4 = { fg = M.colors.pink, bold = true },
  markdownH5 = { fg = M.colors.pink, bold = true },
  markdownH6 = { fg = M.colors.pink, bold = true },
  markdownHeadingDelimiter = { fg = M.colors.red },
  markdownHeadingRule = { fg = M.colors.comment },
  markdownId = { fg = M.colors.magenta },
  markdownIdDeclaration = { fg = M.colors.cyan },
  markdownIdDelimiter = { fg = M.colors.magenta },
  markdownItalic = { fg = M.colors.yellow, italic = true },
  markdownLinkDelimiter = { fg = M.colors.magenta },
  markdownLinkText = { fg = M.colors.pink },
  markdownListMarker = { fg = M.colors.cyan },
  markdownOrderedListMarker = { fg = M.colors.red },
  markdownRule = { fg = M.colors.comment },

  --  Diff
  diffAdded = { fg = M.colors.green },
  diffRemoved = { fg = M.colors.red },
  diffFileId = { fg = M.colors.yellow, bold = true, reverse = true },
  diffFile = { fg = M.colors.nontext },
  diffNewFile = { fg = M.colors.green },
  diffOldFile = { fg = M.colors.red },

  debugPc = { bg = M.colors.menu },
  debugBreakpoint = { fg = M.colors.red, reverse = true },

  -- Git Signs
  GitSignsAdd = { fg = M.colors.bright_green },
  GitSignsChange = { fg = M.colors.cyan },
  GitSignsDelete = { fg = M.colors.pink },
  GitSignsAddLn = { fg = M.colors.black, bg = M.colors.bright_green },
  GitSignsChangeLn = { fg = M.colors.black, bg = M.colors.cyan },
  GitSignsDeleteLn = { fg = M.colors.black, bg = M.colors.pink },
  GitSignsCurrentLineBlame = { fg = M.colors.white },

  -- Telescope
  TelescopePromptBorder = { fg = M.colors.comment },
  TelescopeResultsBorder = { fg = M.colors.comment },
  TelescopePreviewBorder = { fg = M.colors.comment },
  TelescopeSelection = { fg = M.colors.white, bg = M.colors.selection },
  TelescopeMultiSelection = { fg = M.colors.magenta, bg = M.colors.selection },
  TelescopeNormal = { fg = M.colors.foreground, bg = M.colors.bg },
  TelescopeMatching = { fg = M.colors.green },
  TelescopePromptPrefix = { fg = M.colors.magenta },
  TelescopeResultsDiffDelete = { fg = M.colors.red },
  TelescopeResultsDiffChange = { fg = M.colors.cyan },
  TelescopeResultsDiffAdd = { fg = M.colors.green },

  -- Flash
  FlashLabel = { bg = M.colors.red, fg = M.colors.bright_white },

  -- NvimTree
  NvimTreeNormal = { fg = M.colors.foreground, bg = M.colors.menu },
  NvimTreeVertSplit = { fg = M.colors.bg, bg = M.colors.bg },
  NvimTreeRootFolder = { fg = M.colors.foreground, bold = true },
  NvimTreeGitDirty = { fg = M.colors.yellow },
  NvimTreeGitNew = { fg = M.colors.bright_green },
  NvimTreeImageFile = { fg = M.colors.pink },
  NvimTreeFolderIcon = { fg = M.colors.magenta },
  NvimTreeIndentMarker = { fg = M.colors.nontext },
  NvimTreeEmptyFolderName = { fg = M.colors.comment },
  NvimTreeFolderName = { fg = M.colors.foreground },
  NvimTreeSpecialFile = { fg = M.colors.pink, underline = true },
  NvimTreeOpenedFolderName = { fg = M.colors.foreground },
  NvimTreeCursorLine = { bg = M.colors.selection },
  NvimTreeIn = { bg = M.colors.selection },

  -- NvimTreeEndOfBuffer = endOfBuffer,

  -- NeoTree
  neotree = {
    NeoTreeNormal = { fg = M.colors.foreground, bg = M.colors.menu },
    NeoTreeNormalNC = { fg = M.colors.foreground, bg = M.colors.menu },
    NeoTreeDirectoryName = { fg = M.colors.foreground },
    NeoTreeGitUnstaged = { fg = M.colors.bright_magenta },
    NeoTreeGitModified = { fg = M.colors.bright_magenta },
    NeoTreeGitUntracked = { fg = M.colors.bright_green },
    NeoTreeDirectoryIcon = { fg = M.colors.magenta },
    NeoTreeIndentMarker = { fg = M.colors.nontext },
    NeoTreeDotfile = { fg = M.colors.comment },
  },

  -- Bufferline
  BufferLineIndicatorSelected = { fg = M.colors.magenta },
  BufferLineFill = { bg = M.colors.black },
  BufferLineBufferSelected = { bg = M.colors.bg },
  BufferLineSeparator = { fg = M.colors.black },

  -- LSP
  DiagnosticError = { fg = M.colors.red },
  DiagnosticWarn = { fg = M.colors.yellow },
  DiagnosticInfo = { fg = M.colors.cyan },
  DiagnosticHint = { fg = M.colors.cyan },
  DiagnosticUnderlineError = { undercurl = true, sp = M.colors.red },
  DiagnosticUnderlineWarn = { undercurl = true, sp = M.colors.yellow },
  DiagnosticUnderlineInfo = { undercurl = true, sp = M.colors.cyan },
  DiagnosticUnderlineHint = { undercurl = true, sp = M.colors.cyan },
  DiagnosticSignError = { fg = M.colors.red },
  DiagnosticSignWarn = { fg = M.colors.yellow },
  DiagnosticSignInfo = { fg = M.colors.cyan },
  DiagnosticSignHint = { fg = M.colors.cyan },
  DiagnosticFloatingError = { fg = M.colors.red },
  DiagnosticFloatingWarn = { fg = M.colors.yellow },
  DiagnosticFloatingInfo = { fg = M.colors.cyan },
  DiagnosticFloatingHint = { fg = M.colors.cyan },
  DiagnosticVirtualTextError = { fg = M.colors.red },
  DiagnosticVirtualTextWarn = { fg = M.colors.yellow },
  DiagnosticVirtualTextInfo = { fg = M.colors.cyan },
  DiagnosticVirtualTextHint = { fg = M.colors.cyan },

  LspDiagnosticsDefaultError = { fg = M.colors.red },
  LspDiagnosticsDefaultWarning = { fg = M.colors.yellow },
  LspDiagnosticsDefaultInformation = { fg = M.colors.cyan },
  LspDiagnosticsDefaultHint = { fg = M.colors.cyan },
  LspDiagnosticsUnderlineError = { fg = M.colors.red, undercurl = true },
  LspDiagnosticsUnderlineWarning = { fg = M.colors.yellow, undercurl = true },
  LspDiagnosticsUnderlineInformation = { fg = M.colors.cyan, undercurl = true },
  LspDiagnosticsUnderlineHint = { fg = M.colors.cyan, undercurl = true },
  LspReferenceText = { fg = M.colors.orange },
  LspReferenceRead = { fg = M.colors.orange },
  LspReferenceWrite = { fg = M.colors.orange },
  LspCodeLens = { fg = M.colors.cyan },
  LspInlayHint = { fg = '#969696', bg = '#2f3146' },

  -- IndentBlankLine
  IndentBlanklineContextChar = { fg = M.colors.pink, nocombine = true },

  -- barbar
  BufferVisibleTarget = { fg = M.colors.red },
  BufferTabpages = { fg = M.colors.nontext, bg = M.colors.black, bold = true },
  BufferTabpageFill = { fg = M.colors.nontext, bg = M.colors.black },
  BufferCurrentSign = { fg = M.colors.magenta },
  BufferCurrentTarget = { fg = M.colors.red },
  BufferInactive = { fg = M.colors.comment, bg = M.colors.black, italic = true },
  BufferInactiveIndex = {
    fg = M.colors.nontext,
    bg = M.colors.black,
    italic = true,
  },
  BufferInactiveMod = {
    fg = M.colors.yellow,
    bg = M.colors.black,
    italic = true,
  },
  BufferInactiveSign = {
    fg = M.colors.nontext,
    bg = M.colors.black,
    italic = true,
  },
  BufferInactiveTarget = { fg = M.colors.red, bg = M.colors.black, bold = true },

  -- Cmp
  CmpItemAbbr = { fg = M.colors.white, bg = M.colors.bg },
  CmpItemKind = { fg = M.colors.white, bg = M.colors.bg },
  CmpItemKindMethod = { link = '@function.method' },
  CmpItemKindText = { link = '@markup' },
  CmpItemKindFunction = { link = '@function' },
  CmpItemKindConstructor = { link = '@type' },
  CmpItemKindVariable = { link = '@variable' },
  CmpItemKindClass = { link = '@type' },
  CmpItemKindInterface = { link = '@type' },
  CmpItemKindModule = { link = '@module' },
  CmpItemKindProperty = { link = '@property' },
  CmpItemKindOperator = { link = '@operator' },
  CmpItemKindReference = { link = '@variable.parameter.reference' },
  CmpItemKindUnit = { link = '@variable.member' },
  CmpItemKindValue = { link = '@variable.member' },
  CmpItemKindField = { link = '@variable.member' },
  CmpItemKindEnum = { link = '@variable.member' },
  CmpItemKindKeyword = { link = '@keyword' },
  CmpItemKindSnippet = { link = '@markup' },
  CmpItemKindColor = { link = 'DevIconCss' },
  CmpItemKindFile = { link = 'TSURI' },
  CmpItemKindFolder = { link = 'TSURI' },
  CmpItemKindEvent = { link = '@constant' },
  CmpItemKindEnumMember = { link = '@variable.member' },
  CmpItemKindConstant = { link = '@constant' },
  CmpItemKindStruct = { link = '@structure' },
  CmpItemKindTypeParameter = { link = '@variable.parameter' },

  -- Rainbow delimiter
  RainbowDelimiterRed = { fg = M.colors.foreground },
  RainbowDelimiterYellow = { fg = M.colors.pink },
  RainbowDelimiterBlue = { fg = M.colors.cyan },
  RainbowDelimiterOrange = { fg = M.colors.green },
  RainbowDelimiterGreen = { fg = M.colors.magenta },
  RainbowDelimiterViolet = { fg = M.colors.orange },
  RainbowDelimiterCyan = { fg = M.colors.foreground },

  -- mini.indentscope
  MiniIndentscopeSymbol = { fg = '#B5629B' },
  MiniIndentscopeSymbolOff = { fg = '#B5629B' },

  -- goolord/alpha-nvim
  AlphaHeader = { fg = M.colors.magenta },
  AlphaButtons = { fg = M.colors.cyan },
  AlphaShortcut = { fg = M.colors.orange },
  AlphaFooter = { fg = M.colors.magenta, italic = true },

  -- nvimdev/dashboard-nvim
  DashboardShortCut = { fg = M.colors.cyan },
  DashboardHeader = { fg = M.colors.magenta },
  DashboardCenter = { fg = M.colors.foreground },
  DashboardFooter = { fg = M.colors.magenta, italic = true },
  DashboardKey = { fg = M.colors.orange },
  DashboardDesc = { fg = M.colors.cyan },
  DashboardIcon = { fg = M.colors.cyan, bold = true },

  -- dap UI
  DapUIPlayPause = { fg = M.colors.bright_green },
  DapUIRestart = { fg = M.colors.green },
  DapUIStop = { fg = M.colors.red },
  DapUIStepOver = { fg = M.colors.cyan },
  DapUIStepInto = { fg = M.colors.cyan },
  DapUIStepOut = { fg = M.colors.cyan },
  DapUIStepBack = { fg = M.colors.cyan },
  DapUIType = { fg = M.colors.teal },
  DapUIScope = { fg = M.colors.nord_blue },
  DapUIModifiedValue = { fg = M.colors.nord_blue, bold = true },
  DapUIDecoration = { fg = M.colors.nord_blue },
  DapUIThread = { fg = M.colors.bright_green },
  DapUIStoppedThread = { fg = M.colors.nord_blue },
  DapUISource = { fg = M.colors.teal },
  DapUILineNumber = { fg = M.colors.nord_blue },
  DapUIFloatBorder = { fg = M.colors.nord_blue },
  DapUIWatchesEmpty = { fg = M.colors.pink },
  DapUIWatchesValue = { fg = M.colors.bright_green },
  DapUIWatchesError = { fg = M.colors.pink },
  DapUIBreakpointsPath = { fg = M.colors.nord_blue },
  DapUIBreakpointsInfo = { fg = M.colors.bright_green },
  DapUIBreakpointsCurrentLine = { fg = M.colors.bright_green, bold = true },
  DapStoppedLine = { default = true, link = 'Visual' },
  DapUIWinSelect = { fg = M.colors.nord_blue, bold = true },

  -- Notify
  NotifyInfoIcon = { fg = M.colors.green },
  NotifyInfoTitle = { fg = M.colors.green },
  NotifyInfoBorder = { fg = '#2C453F' },
  NotifyErrorIcon = { fg = M.colors.red },
  NotifyErrorTitle = { fg = M.colors.red },
  NotifyErrorBorder = { fg = '#DD6E6B' },
  NotifyWarnIcon = { fg = M.colors.orange },
  NotifyWarnTitle = { fg = M.colors.orange },
  NotifyWarnBorder = { fg = '#785637' },
}

return M
