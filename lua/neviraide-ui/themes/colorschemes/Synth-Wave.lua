---@type Colorscheme
local M = {}

M.type = 'dark'
M.borders = 'shadow'

M.colors = {
  active_accent = '#3d59a1',
  background = '#241B2F',
  foreground = '#495495',
  second_background = '#16161e',

  white = '#c0caf5',
  black = '#1a1b26', --  nvim bg
  baby_pink = '#DE8C92',
  pink = '#ff75a0',
  nord_blue = '#80a8fd',
  grey = '#403D4E',
  magenta = '#9d7cd8',
  teal = '#1abc9c',

  green = '#72f1b8',
  blue = '#03edf9',
  red = '#fe4450',
  yellow = '#fede5d',
  orange = '#ff8b39',
  cyan = '#03edf9',

  bright_yellow = '#f3e70f',
  bright_green = '#73daca',
  bright_magenta = '#ff7edb',
}

M.polish_hl = {
  Normal = { fg = '#ecebed', bg = '#262335' },
  ColorColumn = { fg = 'NONE', bg = '#2C2540' },
  CursorColumn = { fg = 'NONE', bg = '#2C2540' },
  CursorLine = { fg = 'NONE', bg = '#2C2540' },
  CursorLineNr = { fg = '#D4D3D7', bg = '#2C2540' },
  DiffAdd = { fg = 'NONE', bg = '#90DEB6' },
  DiffChange = { fg = 'NONE', bg = '#D884C7' },
  DiffDelete = { fg = 'Black', bg = '#EB8F82', bold = true },
  DiffText = { fg = 'NONE', bg = 'Red', bold = true },
  FoldColumn = { fg = '#495495', bg = '#2C2540' },
  Folded = { fg = '#495495', bg = '#2C2540' },
  LineNr = { fg = '#888690', bg = 'NONE' },
  NonText = { fg = '#495495', bg = 'NONE' },
  Pmenu = { fg = '#ECEBED', bg = '#2C2540' },
  PmenuSbar = { fg = 'NONE', bg = '#3E3B4B' },
  PmenuSel = { fg = '#ECEBED', bg = '#495495' },
  PmenuThumb = { fg = 'NONE', bg = '#ECEBED' },
  Search = { fg = 'Black', bg = '#FEDE5D' },
  SignColumn = { fg = '#888690', bg = 'NONE' },
  SpecialKey = { fg = '#ECEBED', bg = '#2C2540' },
  StatusLine = { fg = '#ECEBED', bg = '#2C2540' },
  StatusLineNC = { fg = '#ECEBED', bg = '#2C2540' },
  TabLine = { fg = '#495495', bg = '#2C2540' },
  TabLineFill = { fg = 'NONE', bg = '#2C2540' },
  TabLineSel = { fg = '#EB8F82', bg = '#2C2540' },
  Title = { fg = '#D884C7', bg = 'NONE' },
  Todo = { fg = 'Black', bg = '#FEDE5D' },
  VertSplit = { fg = '#2C2540', bg = '#495495' },
  Visual = { fg = 'NONE', bg = '#3E3B4B' },
  VisualNOS = { fg = 'NONE', bg = 'NONE' },
  WildMenu = { fg = 'Black', bg = '#FEDE5D' },
  Comment = { fg = '#495495', bg = 'NONE' },
  Constant = { fg = '#E55A5E', bg = 'NONE' },
  Error = { fg = '#ECEBED', bg = 'Red' },
  Identifier = { fg = '#40ffff', bg = 'NONE' },
  Ignore = { fg = 'Black', bg = 'NONE' },
  Include = { fg = '#90DEB6', bg = 'NONE' },
  PreProc = { fg = '#FEDE5D', bg = 'NONE' },
  Special = { fg = '#EA9652', bg = 'NONE' },
  Statement = { fg = '#FEDE5D', bg = 'NONE' },
  String = { fg = '#EA9652', bg = 'NONE' },
  Type = { fg = '#E55A5E' },
  Underlined = { fg = '#40ffff', bg = 'NONE' },
  EndOfBuffer = { link = 'NonText' },
  QuickFixLine = { link = 'Search' },
  Boolean = { link = 'Constant' },
  Character = { link = 'Constant' },
  Conditional = { link = 'Statement' },
  Define = { link = 'PreProc' },
  Debug = { link = 'Special' },
  Delimiter = { link = 'Special' },
  Exception = { link = 'Statement' },
  Float = { link = 'Number' },
  Function = { link = 'Identifier' },
  Keyword = { link = 'Statement' },
  Label = { link = 'Statement' },
  Macro = { link = 'PreProc' },
  Number = { link = 'Constant' },
  Operator = { link = 'Statement' },
  PreCondit = { link = 'PreProc' },
  Repeat = { link = 'Statement' },
  SpecialChar = { link = 'Special' },
  SpecialComment = { link = 'Special' },
  StorageClass = { link = 'Type' },
  Structure = { link = 'Type' },
  Tag = { link = 'Special' },
  Typedef = { link = 'Type' },
  lCursor = { link = 'Cursor' },
  typescriptFlowMaybe = { link = 'Normal' },
  typescriptFlowObject = { link = 'Normal' },
  typescriptFlowType = { link = 'PreProc' },
  typescriptClassDefinition = { link = 'Normal' },
  typescriptClassFuncName = { link = 'Title' },
  typescriptImport = { link = 'Include' },
  typescriptExport = { link = 'Include' },
  typescriptFrom = { link = 'PreProc' },
  typescriptFuncName = { link = 'Identifier' },
  typescriptFutureKeys = { link = 'Statement' },
  typescriptFuncCall = { link = 'Identifier' },
  typescriptModuleKeywords = { link = 'Statement' },
  typescriptModuleOperators = { link = 'Statement' },
  typescriptNull = { link = 'Constant' },
  typescriptObjectFuncName = { link = 'Identifier' },
  typescriptObjectKey = { link = 'Title' },
  typescriptSuper = { link = 'Statement' },
  typescriptTemplateBraces = { link = 'Special' },
  typescriptUndefined = { link = 'Constant' },
  typescriptFunction = { link = 'PreProc' },
  typescriptThis = { link = 'Constant' },
  typescriptStorageClass = { link = 'PreProc' },
  typescriptVariableDef = { link = 'Title' },
  typescriptAsyncKeyword = { link = 'Title' },
  typescriptFuncArgs = { link = 'Title' },
  typescriptArrowFuncArgs = { link = 'Title' },
  typescriptArrowFunction = { link = 'PreProc' },
  typescriptObjectShorthandProp = { link = 'Title' },
  typescriptGlobalObjects = { link = 'Constant' },
  typescriptModuleKeyword = { link = 'Title' },
  typescriptClassStringKey = { link = 'Title' },
  typescriptObjectKeyComputed = { link = 'Title' },
  typescriptObjectValue = { link = 'Title' },
  typescriptBlockLabel = { link = 'Title' },
  typescriptBlockLabelKey = { link = 'Title' },
  rubyClass = { link = 'PreProc' },
  rubyConstant = { link = 'Constant' },
  rubyInstanceVariable = { link = 'Title' },
  rubyInterpolationDelimiter = { link = 'Identifier' },
  rubyModule = { link = 'Statement' },
  rubyFunction = { link = 'Identifier' },
  rubyInclude = { link = 'Include' },
  markdownBold = { link = 'Special' },
  markdownCode = { link = 'String' },
  markdownCodeDelimiter = { link = 'String' },
  markdownHeadingDelimiter = { link = 'Comment' },
  markdownRule = { link = 'Comment' },
}

return M
