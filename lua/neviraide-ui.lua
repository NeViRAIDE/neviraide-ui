-- TODO: do config for ui or not
local require = require('neviraide-ui.utils.lazy')

local Health = require('neviraide-ui.health')
local Api = require('neviraide-ui.api')
local Config = require('neviraide-ui.config')

local M = {}

-- local api = vim.api
M.api = Api

-- M.config = {
--   -- TODO: borders following hyprland
--   hyprTheme = true,
-- }

---Setup configuration
---@param opts? NeviraideUIConfig
function M.setup(opts)
  -- run some checks before setting up
  if not Health.check({ checkhealth = false, loaded = false }) then return end

  -- M.config = vim.tbl_deep_extend('force', Config, opts or {})

  local function load()
    require('neviraide-ui.utils').try(function()
      require('neviraide-ui.config').setup(opts)
      -- require('neviraide-ui.commands').setup()
      require('neviraide-ui.message.router').setup()
      M.enable()
    end)
  end

  if vim.v.vim_did_enter == 0 then
    -- Schedule loading after VimEnter. Get the UI up and running first.
    vim.api.nvim_create_autocmd('VimEnter', {
      once = true,
      callback = load,
    })
  else
    -- Schedule on the event loop
    vim.schedule(load)
  end
end

function M.disable()
  Config._running = false
  -- if Config.options.notify.enabled then
  --   require('neviraide-ui.source.notify').disable()
  -- end
  require('neviraide-ui.message.router').disable()
  require('neviraide-ui.ui').disable()
  require('neviraide-ui.utils.hacks').disable()
end

M.deactivate = M.disable

-- function M.cmd(name) require('neviraide-ui.commands').cmd(name) end

function M.enable()
  Config._running = true
  -- if Config.options.notify.enabled then
  --   require('neviraide-ui.source.notify').enable()
  -- end
  require('neviraide-ui.utils.hacks').enable()
  require('neviraide-ui.ui').enable()
  require('neviraide-ui.message.router').enable()

  if Config.options.health.checker then Health.checker() end
end

-- Redirect any messages generated by a command or function
---@param cmd string|fun() command or function to execute
---@param routes? NeviraideUIRouteConfig[] custom routes. Defaults to `config.redirect`
function M.redirect(cmd, routes)
  return require('neviraide-ui.message.router').redirect(cmd, routes)
end

---@param msg string
---@param level number|string
---@param opts? table<string, any>
function M.notify(msg, level, opts)
  return require('neviraide-ui.source.notify').notify(msg, level, opts)
end

return M
